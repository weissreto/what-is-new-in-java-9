package whatisnewin.java.util.stream;

import java.util.stream.Collectors;
import java.util.stream.Collector;
import java.util.function.Function;
import java.util.stream.Stream;
import java.util.function.Predicate;

/**
 * This source file was generated by WhatIsNewInJava.<br>
 *
 * This class provides an example call to each method in class {@link Collectors}
 * that were newly introduced in Java version 9.<br>
 *
 * {@link Collectors} is an old class but has new fields, constructors or methods.
 * @since 1.8
 * @see Collectors
 */
public final class WhatIsNewInCollectors
{
  /**
   * Example call to new method {@link Collectors#flatMapping(Function, Collector)}.
   * @since 9
   * @see Collectors#flatMapping(Function, Collector)
   */
  public static <T, U, A, R> Collector<T, ?, R> flatMapping(Function<? super T, ? extends Stream<? extends U>> mapper, Collector<? super U, A, R> downstream)
  {
    Collector<T, ?, R> result = Collectors.flatMapping(mapper, downstream);
    return result;
  }

  /**
   * Example call to new method {@link Collectors#filtering(Predicate, Collector)}.
   * @since 9
   * @see Collectors#filtering(Predicate, Collector)
   */
  public static <T, A, R> Collector<T, ?, R> filtering(Predicate<? super T> predicate, Collector<? super T, A, R> downstream)
  {
    Collector<T, ?, R> result = Collectors.filtering(predicate, downstream);
    return result;
  }

}
